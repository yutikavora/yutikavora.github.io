{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/yutika/Documents/YutikaPortfolio/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/yutika/Documents/YutikaPortfolio/node_modules/@babel/runtime/regenerator/index.js\");\nvar _asyncToGenerator = require(\"/Users/yutika/Documents/YutikaPortfolio/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"/Users/yutika/Documents/YutikaPortfolio/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/yutika/Documents/YutikaPortfolio/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\nvar Utils_1 = require(\"./Utils\");\nvar Utils_2 = require(\"../../Utils/Utils\");\nvar NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nvar Constants_1 = require(\"../../Core/Utils/Constants\");\nvar PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nvar PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 6;\n                return this.initRawData();\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n      return initAsync;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n      var container = this.container,\n        options = this.options;\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n      this.redrawTimeout = window.setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.initRawData(true);\n              case 2:\n                _context2.next = 4;\n                return container.particles.redraw();\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n      var options = this.options;\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n      return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var options = this.options,\n        polygonDraw = options.draw;\n      if (!options.enable || !polygonDraw.enable) {\n        return;\n      }\n      var rawData = this.raw;\n      var _iterator = _createForOfIteratorHelper(this.paths),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d,\n            path2dSupported = this.path2DSupported;\n          if (!context) {\n            continue;\n          }\n          if (path2dSupported && path2d && this.offset) {\n            (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n          radius = particle.getRadius();\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n            pj = this.raw[j];\n          closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n          var dist = (0, NumberUtils_1.getDistances)(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n          if (dist.distance < radius) {\n            (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n      var container = this.container,\n        options = this.options;\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n      if (!this.raw) {\n        throw new Error(Constants_1.Constants.noPolygonFound);\n      }\n      var canvasSize = container.canvas.size,\n        x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n        y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i],\n          pj = this.raw[j],\n          intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n      var container = this.container,\n        options = this.options,\n        parser = new DOMParser(),\n        doc = parser.parseFromString(xml, \"image/svg+xml\"),\n        svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n      this.paths = [];\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n      var pxRatio = container.retina.pixelRatio,\n        scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 3;\n                  break;\n                }\n                return _context3.abrupt(\"return\", this.raw);\n              case 3:\n                _context3.next = 5;\n                return fetch(url);\n              case 5:\n                req = _context3.sent;\n                if (req.ok) {\n                  _context3.next = 8;\n                  break;\n                }\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n              case 8:\n                _context3.t0 = this;\n                _context3.next = 11;\n                return req.text();\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container,\n        options = this.options;\n      var position;\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n      var coords = (0, Utils_2.itemFromArray)(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n      var options = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n      var path = (0, Utils_2.itemFromArray)(this.paths),\n        distance = Math.floor(Math.random() * path.length) + 1,\n        point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var options = this.container.actualOptions,\n        polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      var offset = 0,\n        point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n          return tot + path.length;\n        }, 0),\n        distance = totalLength / options.particles.number.value;\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n      }\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n      var _a, _b;\n      var options = this.options;\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n        _step4;\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n          if (pathData) {\n            var path2d = new Path2D(pathData),\n              matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n              finalPath = new Path2D(),\n              transform = matrix.scale(options.scale);\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n          path.path2d.closePath();\n        };\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n              case 7:\n                if (options.data) {\n                  data = options.data;\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n              case 8:\n                this.createPath2D();\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n      return initRawData;\n    }()\n  }]);\n  return PolygonMaskInstance;\n}();\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"names":["_createForOfIteratorHelper","require","default","_regeneratorRuntime","_asyncToGenerator","_classCallCheck","_createClass","Object","defineProperty","exports","value","PolygonMaskInstance","Utils_1","Utils_2","NumberUtils_1","Constants_1","PolygonMask_1","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","key","_initAsync","mark","_callee","polygonMaskOptions","wrap","_callee$","_context","prev","next","load","polygon","enable","initRawData","stop","initAsync","_x","apply","arguments","resize","_this","type","redrawTimeout","clearTimeout","setTimeout","_callee2","_callee2$","_context2","particles","redraw","raw","paths","particlesInitialization","inline","arrangement","drawPoints","particlePosition","position","_a","_b","length","deepExtend","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","context","polygonDraw","rawData","_iterator","_step","s","n","done","path","path2d","path2dSupported","offset","drawPolygonMaskPath","stroke","drawPolygonMask","err","e","f","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","calcClosestPtOnSegment","dist","getDistances","_ref2","distance","segmentBounce","velocity","undefined","factor","x","y","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","parsePaths","_downloadSvgPath","_callee3","svgUrl","url","req","_callee3$","_context3","abrupt","fetch","sent","ok","t0","text","t1","t2","call","downloadSvgPath","_x2","_x3","_iterator2","_step2","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","_iterator3","_step3","pathDistance","createPath2D","_this2","_iterator4","_step4","_loop","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","_ret","_initRawData","_callee4","data","namespaces","_callee4$","_context4","Array","map","t","concat","join","_x4"],"sources":["/Users/yutika/Documents/YutikaPortfolio/node_modules/tsparticles/cjs/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Utils_2 = require(\"../../Utils/Utils\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nconst Constants_1 = require(\"../../Core/Utils/Constants\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n                const dist = (0, NumberUtils_1.getDistances)(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = (0, Utils_2.itemFromArray)(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const path = (0, Utils_2.itemFromArray)(this.paths), distance = Math.floor(Math.random() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}