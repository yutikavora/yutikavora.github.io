{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/yutika/Documents/YutikaPortfolio/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/yutika/Documents/YutikaPortfolio/node_modules/@babel/runtime/helpers/createClass.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParallaxMover = void 0;\nvar Utils_1 = require(\"../../Utils/Utils\");\nvar ParallaxMover = /*#__PURE__*/function () {\n  function ParallaxMover() {\n    _classCallCheck(this, ParallaxMover);\n  }\n  _createClass(ParallaxMover, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !(0, Utils_1.isSsr)() && !particle.destroyed && particle.container.actualOptions.interactivity.events.onHover.parallax.enable;\n    }\n  }, {\n    key: \"move\",\n    value: function move(particle) {\n      var container = particle.container,\n        options = container.actualOptions;\n      if ((0, Utils_1.isSsr)() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n      var parallaxForce = options.interactivity.events.onHover.parallax.force,\n        mousePos = container.interactivity.mouse.position;\n      if (!mousePos) {\n        return;\n      }\n      var canvasCenter = {\n          x: container.canvas.size.width / 2,\n          y: container.canvas.size.height / 2\n        },\n        parallaxSmooth = options.interactivity.events.onHover.parallax.smooth,\n        factor = particle.getRadius() / parallaxForce,\n        centerDistance = {\n          x: (mousePos.x - canvasCenter.x) * factor,\n          y: (mousePos.y - canvasCenter.y) * factor\n        };\n      particle.offset.x += (centerDistance.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (centerDistance.y - particle.offset.y) / parallaxSmooth;\n    }\n  }]);\n  return ParallaxMover;\n}();\nexports.ParallaxMover = ParallaxMover;","map":{"version":3,"names":["_classCallCheck","require","default","_createClass","Object","defineProperty","exports","value","ParallaxMover","Utils_1","key","init","isEnabled","particle","isSsr","destroyed","container","actualOptions","interactivity","events","onHover","parallax","enable","move","options","parallaxForce","force","mousePos","mouse","position","canvasCenter","x","canvas","size","width","y","height","parallaxSmooth","smooth","factor","getRadius","centerDistance","offset"],"sources":["/Users/yutika/Documents/YutikaPortfolio/node_modules/tsparticles/cjs/Movers/Parallax/ParallaxMover.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParallaxMover = void 0;\nconst Utils_1 = require(\"../../Utils/Utils\");\nclass ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!(0, Utils_1.isSsr)() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions;\n        if ((0, Utils_1.isSsr)() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        }, parallaxSmooth = options.interactivity.events.onHover.parallax.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (centerDistance.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (centerDistance.y - particle.offset.y) / parallaxSmooth;\n    }\n}\nexports.ParallaxMover = ParallaxMover;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA,kGAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAF,OAAA,+FAAAC,OAAA;AACbE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,IAAMC,OAAO,GAAGR,OAAO,CAAC,mBAAmB,CAAC;AAAC,IACvCO,aAAa;EAAA,SAAAA,cAAA;IAAAR,eAAA,OAAAQ,aAAA;EAAA;EAAAL,YAAA,CAAAK,aAAA;IAAAE,GAAA;IAAAH,KAAA,EACf,SAAAI,KAAA,EAAO,CACP;EAAC;IAAAD,GAAA;IAAAH,KAAA,EACD,SAAAK,UAAUC,QAAQ,EAAE;MAChB,OAAQ,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAACK,KAAK,EAAE,CAAC,IACzB,CAACD,QAAQ,CAACE,SAAS,IACnBF,QAAQ,CAACG,SAAS,CAACC,aAAa,CAACC,aAAa,CAACC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAACC,MAAM;IACrF;EAAC;IAAAZ,GAAA;IAAAH,KAAA,EACD,SAAAgB,KAAKV,QAAQ,EAAE;MACX,IAAMG,SAAS,GAAGH,QAAQ,CAACG,SAAS;QAAEQ,OAAO,GAAGR,SAAS,CAACC,aAAa;MACvE,IAAI,CAAC,CAAC,EAAER,OAAO,CAACK,KAAK,EAAE,CAAC,IAAI,CAACU,OAAO,CAACN,aAAa,CAACC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAACC,MAAM,EAAE;QAC/E;MACJ;MACA,IAAMG,aAAa,GAAGD,OAAO,CAACN,aAAa,CAACC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAACK,KAAK;QAAEC,QAAQ,GAAGX,SAAS,CAACE,aAAa,CAACU,KAAK,CAACC,QAAQ;MAC5H,IAAI,CAACF,QAAQ,EAAE;QACX;MACJ;MACA,IAAMG,YAAY,GAAG;UACjBC,CAAC,EAAEf,SAAS,CAACgB,MAAM,CAACC,IAAI,CAACC,KAAK,GAAG,CAAC;UAClCC,CAAC,EAAEnB,SAAS,CAACgB,MAAM,CAACC,IAAI,CAACG,MAAM,GAAG;QACtC,CAAC;QAAEC,cAAc,GAAGb,OAAO,CAACN,aAAa,CAACC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAACiB,MAAM;QAAEC,MAAM,GAAG1B,QAAQ,CAAC2B,SAAS,CAAC,CAAC,GAAGf,aAAa;QAAEgB,cAAc,GAAG;UACtIV,CAAC,EAAE,CAACJ,QAAQ,CAACI,CAAC,GAAGD,YAAY,CAACC,CAAC,IAAIQ,MAAM;UACzCJ,CAAC,EAAE,CAACR,QAAQ,CAACQ,CAAC,GAAGL,YAAY,CAACK,CAAC,IAAII;QACvC,CAAC;MACD1B,QAAQ,CAAC6B,MAAM,CAACX,CAAC,IAAI,CAACU,cAAc,CAACV,CAAC,GAAGlB,QAAQ,CAAC6B,MAAM,CAACX,CAAC,IAAIM,cAAc;MAC5ExB,QAAQ,CAAC6B,MAAM,CAACP,CAAC,IAAI,CAACM,cAAc,CAACN,CAAC,GAAGtB,QAAQ,CAAC6B,MAAM,CAACP,CAAC,IAAIE,cAAc;IAChF;EAAC;EAAA,OAAA7B,aAAA;AAAA;AAELF,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script"}