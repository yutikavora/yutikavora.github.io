import { CSSProperties, DOMAttributes, ForwardedRef, HTMLAttributes, JSXElementConstructor, ReactElement, SVGAttributes } from 'react';

export interface Activity {
	date: string;
	count: number;
	level: number;
}
export type DayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;
export type DayName = "sun" | "mon" | "tue" | "wed" | "thu" | "fri" | "sat";
export type Labels = Partial<{
	months: Array<string>;
	weekdays: Array<string>;
	totalCount: string;
	legend: Partial<{
		less: string;
		more: string;
	}>;
}>;
export type Color = string;
export type ColorScale = Array<Color>;
export type ThemeInput = {
	light: ColorScale;
	dark?: ColorScale;
} | {
	light?: ColorScale;
	dark: ColorScale;
};
export interface BlockAttributes extends SVGAttributes<SVGRectElement>, HTMLAttributes<SVGRectElement> {
}
export type BlockElement = ReactElement<BlockAttributes, JSXElementConstructor<SVGRectElement>>;
export type SVGRectEventHandler = Omit<DOMAttributes<SVGRectElement>, "css" | "children" | "dangerouslySetInnerHTML">;
export type EventHandlerMap = {
	[key in keyof SVGRectEventHandler]: (...event: Parameters<NonNullable<SVGRectEventHandler[keyof SVGRectEventHandler]>>) => (activity: Activity) => void;
};
export interface Props {
	/**
	 * List of calendar entries. Every `Activity` object requires an ISO 8601
	 * `date` string in the format `yyyy-MM-dd`, a `count` property with the
	 * amount of tracked data and a `level` property in the range `0-maxLevel`
	 * to specify activity intensity. The `maxLevel` prop is 4 by default.
	 *
	 * For missing dates, no activity is assumed. This allows choosing the start
	 * and end date of the calendar arbitrarily by passing empty entries as the
	 * first and last item.
	 *
	 * Example object:
	 *
	 * ```json
	 * {
	 *   date: "2021-02-20",
	 *   count: 16,
	 *   level: 3
	 * }
	 * ```
	 */
	data: Array<Activity>;
	/**
	 * Margin between blocks in pixels.
	 */
	blockMargin?: number;
	/**
	 * Border radius of blocks in pixels.
	 */
	blockRadius?: number;
	/**
	 * Block size in pixels.
	 */
	blockSize?: number;
	/**
	 * Use a specific color scheme instead of the system one. Supported values
	 * are `'light'` and `'dark'`.
	 */
	colorScheme?: "light" | "dark";
	/**
	 * Event handlers to register for the SVG `<rect>` elements that are used to
	 * render the calendar days. Handler signature: `event => activity => void`
	 */
	eventHandlers?: EventHandlerMap;
	/**
	 * Font size for text in pixels.
	 */
	fontSize?: number;
	/**
	 * Toggle to hide color legend below calendar.
	 */
	hideColorLegend?: boolean;
	/**
	 * Toggle to hide month labels above calendar.
	 */
	hideMonthLabels?: boolean;
	/**
	 * Toggle to hide the total count below calendar.
	 */
	hideTotalCount?: boolean;
	/**
	 * Localization strings for all calendar labels.
	 *
	 * `totalCount` supports the placeholders `{{count}}` and `{{year}}`.
	 */
	labels?: Labels;
	/**
	 * Maximum activity level (zero indexed).
	 */
	maxLevel?: number;
	/**
	 * Toggle for loading state. `data` property will be ignored if set.
	 */
	loading?: boolean;
	/**
	 * Ref to access the calendar DOM node.
	 */
	ref?: ForwardedRef<HTMLElement>;
	/**
	 * Render prop for calendar blocks (activities). For example, useful to wrap
	 * the element with a tooltip component. Use `React.cloneElement` to pass
	 * additional props to the element if necessary.
	 */
	renderBlock?: (block: BlockElement, activity: Activity) => ReactElement;
	/**
	 * Render prop for color legend blocks. For example, useful to wrap the
	 * element with a tooltip component. Use `React.cloneElement` to pass
	 * additional props to the element if necessary.
	 */
	renderColorLegend?: (block: BlockElement, level: number) => ReactElement;
	/**
	 * Toggle to show weekday labels left to the calendar.
	 * Alternatively, pass a list of ISO 8601 weekday names to show.
	 * For example `['mon', 'wed', 'fri']`.
	 */
	showWeekdayLabels?: boolean | Array<DayName>;
	/**
	 * Style object to pass to component container.
	 */
	style?: CSSProperties;
	/**
	 * Set the calendar colors for the light and dark system color scheme.
	 * Define each color scale explicitly by settings all colors (5 per default)
	 * or pass exactly two colors (the lowest and highest intensity) to calculate
	 * a single-hue scale. Colors can be specified in any valid CSS format.
	 *
	 * The colors for at least one scheme must be set. If undefined, the default
	 * theme is used. By default, the calendar will select the current system color
	 * scheme, but you can enforce a specific scheme with the `colorScheme` prop.
	 *
	 * Example:
	 *
	 * ```tsx
	 * <ActivityCalendar
	 *   data={data}
	 *   theme={{
	 *     light: ['hsl(0, 0%, 92%)', 'firebrick'],
	 *     dark: ['#333', 'rgb(214, 16, 174)'],
	 *   }}
	 * />
	 * ```
	 *
	 */
	theme?: ThemeInput;
	/**
	 * Overwrite the total activity count.
	 */
	totalCount?: number;
	/**
	 * Index of day to be used as start of week. 0 represents Sunday.
	 */
	weekStart?: DayIndex;
}
export declare const ActivityCalendar: import("react").ForwardRefExoticComponent<Omit<Props, "ref"> & import("react").RefAttributes<HTMLElement>>;
export declare const Skeleton: (props: Omit<Props, "data">) => import("react").JSX.Element;

export {
	ActivityCalendar as default,
};

export {};
